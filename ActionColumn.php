<?php
/**
 * Created by PhpStorm.
 * User: vadim
 * Date: 13.02.16
 * Time: 15:27
 */

namespace sibds\grid;

use yii\bootstrap\Html;
use kartik\icons\Icon;

class ActionColumn extends \kartik\grid\ActionColumn
{
    use TranslateTrait;

    public $template = '{update} {copy} {lock}{unlock} {restore} {delete}';

    public function init()
    {
        $this->registerTranslations();
        Icon::map($this->grid->getView(), Icon::FA);
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * Initializes the default button rendering callbacks.
     */
    protected function initDefaultButtons()
    {
        /* TODO: Add support!
        if (!isset($this->buttons['view'])) {
            $this->buttons['view'] = function ($url, $model, $key) {
                $options = array_merge([
                    'title' => self::t('yii', 'View'),
                    'aria-label' => self::t('yii', 'View'),
                    'data-pjax' => '0',
                ], $this->buttonOptions);
                return Html::a('<span class="glyphicon glyphicon-eye-open"></span>', $url, $options);
            };
        }
        */
        if (!isset($this->buttons['update'])) {
            $this->buttons['update'] = function ($url, $model, $key) {
                $options = array_merge([
                    'title' => self::t('messages', 'Edit'),
                    'aria-label' => self::t('messages', 'Edit'),
                    'data-pjax' => '0',
                ], $this->buttonOptions);
                return Html::a(trim(Icon::show('pencil')), $url, $options);
            };
        }
        if (!isset($this->buttons['copy'])) {
            $this->buttons['copy'] = function ($url, $model, $key) {
                $options = array_merge([
                    'title' => self::t('messages', 'Copy'),
                    'aria-label' => self::t('messages', 'Copy'),
                    //'data-pjax' => '0',
                ], $this->buttonOptions);
                if($model->hasMethod('duplicate')
                    &&($model->hasAttribute('removed')&&!$model->removed))
                    return Html::a(trim(Icon::show('copy')), $url, $options);
            };
        }
        if (!isset($this->buttons['lock'])) {
            $this->buttons['lock'] = function ($url, $model, $key) {
                $options = array_merge([
                    'title' => self::t('messages', 'Lock'),
                    'aria-label' => self::t('messages', 'Lock'),
                    //'data-pjax' => '0',
                ], $this->buttonOptions);
                if(($model->hasAttribute('locked')&&!$model->locked)){
                    if($model->hasAttribute('removed')){
                        if(!$model->removed){
                            return Html::a(trim(Icon::show('lock')), $url, $options);
                        } 
                    } else {
                        return Html::a(trim(Icon::show('lock')), $url, $options);
                    }
                }
            };
        }
        if (!isset($this->buttons['unlock'])) {
            $this->buttons['unlock'] = function ($url, $model, $key) {
                $options = array_merge([
                    'title' => self::t('messages', 'Unlock'),
                    'aria-label' => self::t('messages', 'Unlock'),
                    //'data-pjax' => '0',
                ], $this->buttonOptions);
                if(($model->hasAttribute('locked')&&$model->locked)){
                    if($model->hasAttribute('removed')){
                        if(!$model->removed)
                            return Html::a(trim(Icon::show('unlock')), $url, $options);        
                    } else {
                        return Html::a(trim(Icon::show('unlock')), $url, $options);
                    }                    
                }
            };
        }
        if (!isset($this->buttons['restore'])) {
            $this->buttons['restore'] = function ($url, $model, $key) {
                $options = array_merge([
                    'title' => self::t('messages', 'Restore'),
                    'aria-label' => self::t('messages', 'Restore'),
                    'data-confirm' => self::t('messages', 'Are you sure you want to restore this item?'),
                    'data-method' => 'post',
                    'data-pjax' => '0',
                ], $this->buttonOptions);
                if($model->hasAttribute('removed')&&$model->removed)
                    return Html::a(trim(Icon::show('share-square-o')), $url, $options);
            };
        }
        if (!isset($this->buttons['delete'])) {
            $this->buttons['delete'] = function ($url, $model, $key) {
                $name = $model->hasAttribute('removed')&&!$model->removed?self::t('messages', 'To trash'):self::t('messages', 'Delete');
                $options = array_merge([
                    'title' => $name,
                    'aria-label' => $name,
                    'data-confirm' => self::t('messages', 'Are you sure you want to delete this item?'),
                    'data-method' => 'post',
                    'data-pjax' => '0',
                ], $this->buttonOptions);
                return Html::a(trim(Icon::show('trash')), $url, $options);
            };
        }
    }

}
